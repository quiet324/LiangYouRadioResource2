{"version":3,"sources":["../test/emitter.spec.js"],"names":["require","expect","Octokat","TOKEN","REPO_USER","REPO_NAME","describe","it","done","emittedStart","emitter","name","id","status","rate","method","path","to","equal","be","a","true","remaining","gt","limit","reset","client","token","repos","fetch","then","info","not","null","ids","start","end","push","include","length"],"mappings":"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","file":"emitter.spec.js","sourceRoot":"./index.js","sourcesContent":["/* eslint-env mocha */\nconst { expect } = require('chai')\nconst { Octokat, TOKEN, REPO_USER, REPO_NAME } = require('./test-config')\n\ndescribe('Event Emitter', () => {\n\n  it('emits when a request begins and when it completes', function (done) {\n    let emittedStart = false\n    // emittedEnd = false\n    let emitter = function (name, id, {method, path}, status, rate) {\n      expect(method).to.equal('GET')\n      expect(path).to.be.a('string')\n      switch (name) {\n        case 'start':\n          emittedStart = true\n          return emittedStart\n        case 'end':\n          expect(emittedStart).to.be.true\n          expect(status).to.equal(200)\n          expect(rate.remaining).to.be.gt(0)\n          expect(rate.limit).to.be.gt(0)\n          expect(rate.reset).to.be.gt(0)\n          return done()\n        default:\n          return done(`Woah! odd event name ${name}`)\n      }\n    }\n\n    let client = new Octokat({token: TOKEN, emitter})\n    client.repos(REPO_USER, REPO_NAME).fetch().then(info => expect(info).to.not.be.null)\n\n    // Mocha 3 does not like it when a promise is returned _and_ a done callback is expected\n    return null\n  })\n\n  it('emits unique end event IDs that were also emitted in a start event', function (done) {\n    let ids = { start: [], end: [] }\n    let emitter = function (name, id) {\n      ids[name].push(id)\n      if (name === 'end') {\n        // Make sure it previously appeared in a `start` event.\n        expect(ids.start).to.include(id)\n      }\n      if (ids.end.length === 3) {\n        // Make sure each `start` ID is unique.\n        expect(ids.start[0]).to.not.equal(ids.start[1])\n        expect(ids.start[0]).to.not.equal(ids.start[2])\n        expect(ids.start[1]).to.not.equal(ids.start[2])\n        // Make sure each ID from a `start` event also had an `end` event.\n        expect(ids.end).to.include(ids.start[0])\n        expect(ids.end).to.include(ids.start[1])\n        expect(ids.end).to.include(ids.start[2])\n        done()\n      }\n    }\n    let client = new Octokat({token: TOKEN, emitter})\n    // Fire multiple concurrent requests to check their IDs\n    client.repos(REPO_USER, REPO_NAME).fetch()\n    client.repos(REPO_USER, REPO_NAME).fetch()\n    client.repos(REPO_USER, REPO_NAME).fetch()\n  })\n})\n"]}