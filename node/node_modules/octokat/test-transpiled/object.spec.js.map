{"version":3,"sources":["../test/object.spec.js"],"names":["require","expect","client","REPO_USER","REPO_NAME","describe","it","me","repos","fetch","then","items","to","not","be","empty","forks","gists","public","star","contains","a","function","users","issues","issue","user","avatar","url","null","string"],"mappings":";;AAAA;eACmBA,QAAQ,MAAR,C;IAAXC,M,YAAAA,M;;gBACiCD,QAAQ,eAAR,C;IAAjCE,M,aAAAA,M;IAAQC,S,aAAAA,S;IAAWC,S,aAAAA,S;;AAE3BC,SAAS,kBAAT,EAA6B,YAAY;AACvCC,KAAG,wGAAH,EAA6G;AAAA,WAC3GJ,OAAOK,EAAP,CAAUC,KAAV,CAAgBC,KAAhB,GACCC,IADD,CACM,gBAAmB;AAAA,UAARC,KAAQ,QAARA,KAAQ;;AACvBV,aAAOU,KAAP,EAAcC,EAAd,CAAiBC,GAAjB,CAAqBC,EAArB,CAAwBC,KAAxB;AACA,aAAOJ,MAAM,CAAN,EAASK,KAAT,CAAeP,KAAf,EAAP;AACD,KAJD,CAD2G;AAAA,GAA7G;;AAQAH,KAAG,uGAAH,EAA4G;AAAA,WAC1GJ,OAAOe,KAAP,CAAaC,MAAb,CAAoBT,KAApB,GACCC,IADD,CACM,iBAAmB;AAAA,UAARC,KAAQ,SAARA,KAAQ;;AACvBV,aAAOU,KAAP,EAAcC,EAAd,CAAiBC,GAAjB,CAAqBC,EAArB,CAAwBC,KAAxB;AACA,aAAOd,OAAOU,MAAM,CAAN,EAASQ,IAAT,CAAcC,QAArB,EAA+BR,EAA/B,CAAkCE,EAAlC,CAAqCO,CAArC,CAAuCC,QAA9C;AACD,KAJD,CAD0G;AAAA,GAA5G;;AAQAhB,KAAG,gGAAH,EAAqG;AAAA,WACnGJ,OAAOqB,KAAP,CAAad,KAAb,GACCC,IADD,CACM,iBAAmB;AAAA,UAARC,KAAQ,SAARA,KAAQ;;AACvBV,aAAOU,KAAP,EAAcC,EAAd,CAAiBC,GAAjB,CAAqBC,EAArB,CAAwBC,KAAxB;AACA,aAAOd,OAAOU,MAAM,CAAN,EAASM,KAAT,CAAeR,KAAtB,EAA6BG,EAA7B,CAAgCE,EAAhC,CAAmCO,CAAnC,CAAqCC,QAA5C;AACD,KAJD,CADmG;AAAA,GAArG;;AAQA,SAAOhB,GAAG,uDAAH,EAA4D;AAAA,WACjEJ,OAAOM,KAAP,CAAaL,SAAb,EAAwBC,SAAxB,EAAmCoB,MAAnC,CAA0C,CAA1C,EAA6Cf,KAA7C,GAAqDC,IAArD,CAA0D,UAAUe,KAAV,EAAiB;AACzExB,aAAOwB,MAAMC,IAAN,CAAWC,MAAX,CAAkBC,GAAzB,EAA8BhB,EAA9B,CAAiCC,GAAjC,CAAqCC,EAArC,CAAwCe,IAAxC;AACA,aAAO5B,OAAOwB,MAAMC,IAAN,CAAWC,MAAX,CAAkBC,GAAzB,EAA8BhB,EAA9B,CAAiCE,EAAjC,CAAoCO,CAApC,CAAsCS,MAA7C;AACD,KAHD,CADiE;AAAA,GAA5D,CAAP;AAMD,CA/BD","file":"object.spec.js","sourceRoot":"./index.js","sourcesContent":["/* eslint-env mocha */\nconst { expect } = require('chai')\nconst { client, REPO_USER, REPO_NAME } = require('./test-config')\n\ndescribe('Returned Objects', function () {\n  it('has the same methods on octo.repos(REPO_ID).fetch().then(repo) as octo.me.repos.fetch().then(repos[0])', () =>\n    client.me.repos.fetch()\n    .then(function ({items}) {\n      expect(items).to.not.be.empty\n      return items[0].forks.fetch()\n    })\n  )\n\n  it('has the same methods on octo.gists(ID).fetch().then(gist) as octo.gists.public.fetch().then(gists[0])', () =>\n    client.gists.public.fetch()\n    .then(function ({items}) {\n      expect(items).to.not.be.empty\n      return expect(items[0].star.contains).to.be.a.function\n    })\n  )\n\n  it('has the same methods on octo.users(ID).fetch().then(user) as octo.users.fetch().then(users[0])', () =>\n    client.users.fetch()\n    .then(function ({items}) {\n      expect(items).to.not.be.empty\n      return expect(items[0].gists.fetch).to.be.a.function\n    })\n  )\n\n  return it('has does not add the root context to returned objects', () =>\n    client.repos(REPO_USER, REPO_NAME).issues(1).fetch().then(function (issue) {\n      expect(issue.user.avatar.url).to.not.be.null\n      return expect(issue.user.avatar.url).to.be.a.string\n    })\n  )\n})\n"]}