'use strict';

/* eslint-env mocha */
var _require = require('chai'),
    assert = _require.assert,
    expect = _require.expect;

var _require2 = require('./test-config'),
    client = _require2.client,
    REPO_USER = _require2.REPO_USER,
    REPO_NAME = _require2.REPO_NAME;

describe('URL Hypermedia Patterns', function () {
  it('supports hypermedia URLs with optional URL and querystring params', function () {
    var template = '/repos/{repoName}{/user}{/foo}/releases/1/assets{?name,title,label}';
    var expected = '/repos/AAA/BBB/releases/1/assets?name=CCC&label=DDD';
    var params = {
      repoName: 'AAA',
      user: 'BBB',
      name: 'CCC',
      label: 'DDD'
    };

    var _client$fromUrl = client.fromUrl(template, params),
        url = _client$fromUrl.url;

    return expect(url).to.equal(expected);
  });

  it('supports hypermedia URLs with missing querystring params', function () {
    var template = '/repos{?label,title}';
    var expected = '/repos';
    var params = {};

    var _client$fromUrl2 = client.fromUrl(template, params),
        url = _client$fromUrl2.url;

    return expect(url).to.equal(expected);
  });

  it('supports fetching from a hypermedia-constructed URL', function () {
    var template = '/repos/{repoUser}{/repoName}';
    var params = {
      repoUser: REPO_USER,
      repoName: REPO_NAME
    };
    return client.fromUrl(template, params).fetch().then(function (repo) {
      return expect(repo.name).to.equal(REPO_NAME);
    });
  });

  it('supports & in templates', function () {
    var template = 'https://api.github.com/search/code?q={query}{&page,per_page,sort,order}';
    var expected = 'https://api.github.com/search/code?q=octokat&per_page=100';
    var params = {
      query: 'octokat',
      per_page: 100
    };

    var _client$fromUrl3 = client.fromUrl(template, params),
        url = _client$fromUrl3.url;

    return expect(url).to.equal(expected);
  });

  return it('throws error if a required field is missing', function () {
    var template = 'https://api.github.com/search/code?q={query}{&page,per_page,sort,order}';
    var params =
    // query: 'octokat'
    { per_page: 100 };

    var fn = function fn() {
      return client.fromUrl(template, params);
    };
    return assert.throw(fn, Error, 'Octokat Error: Required parameter is missing: query');
  });
});

describe('Hypermedia type conversion', function () {
  it('converts date strings to dates (parse)', function () {
    var json = { created_at: '2016-01-01' };
    var expectedMs = Date.parse(json.created_at);
    return client.parse(json).then(function (val) {
      var actualMs = val.createdAt.getTime();
      return expect(actualMs).to.equal(expectedMs);
    });
  });

  return it('converts date strings to dates (fetch)', function () {
    return client.repos(REPO_USER, REPO_NAME).fetch().then(function (info) {
      return expect(info.createdAt).to.be.an.instanceof(Date);
    });
  });
});

// describe 'URL Hypermedia Patterns (only tested in Node)', ->
//
//   URL_PATTERN = 'https://foo{?name,label}'
//   CONTENT_TYPE = 'application/javascript'
//   CONTENT = 'js_contents()'
//
//   it 'supports a single optional arg', (done) ->
//     EXPECTED_URL = 'https://foo?name=build.js'
//     requestFn = (method, url, content, {contentType, raw}) ->
//       expect(url).to.equal(EXPECTED_URL)
//       expect(content).to.equal(CONTENT)
//       expect(contentType).to.equal(CONTENT_TYPE)
//       expect(raw).to.be.true
//       done()
//     data = {upload_url: URL_PATTERN}
//     {data} = HYPERMEDIA.responseMiddleware({requestFn, data})
//     data.upload('build.js', CONTENT_TYPE, CONTENT)
//
//   it 'supports a single optional arg which is not a string', (done) ->
//     EXPECTED_URL = 'https://foo?name=1234'
//     requestFn = (method, url, content, {contentType, raw}) ->
//       expect(url).to.equal(EXPECTED_URL)
//       expect(content).to.equal(CONTENT)
//       expect(contentType).to.equal(CONTENT_TYPE)
//       expect(raw).to.be.true
//       done()
//     data = {upload_url: URL_PATTERN}
//     {data} = HYPERMEDIA.responseMiddleware({requestFn, data})
//     data.upload(1234, CONTENT_TYPE, CONTENT)
//
//   it 'supports multiple optional args', (done) ->
//     EXPECTED_URL = 'https://foo?name=build.js&label=MY%20LABEL'
//     requestFn = (method, url, content, {contentType, raw}) ->
//       expect(url).to.equal(EXPECTED_URL)
//       expect(content).to.equal(CONTENT)
//       expect(contentType).to.equal(CONTENT_TYPE)
//       expect(raw).to.be.true
//       done()
//     data = {upload_url: URL_PATTERN}
//     {data} = HYPERMEDIA.responseMiddleware({requestFn, data})
//     data.upload({name: 'build.js', label: 'MY LABEL'}, CONTENT_TYPE, CONTENT)
//# sourceMappingURL=hypermedia.spec.js.map