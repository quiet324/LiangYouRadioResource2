{"version":3,"sources":["../../test/ruby-specs/gists.spec.js"],"names":["require","expect","client","LONG_TIMEOUT","test_github_login","describe","timeout","before","newGist","description","public","files","content","gists","create","then","gist","comments","body","gist_comment","gistComment","it","owner","login","to","equal","be","ok","user","update","star","add","flag","true","remove","contains","false","forks","fetch","an","Array","id","console","error","e","starred"],"mappings":"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","file":"gists.spec.js","sourceRoot":"./index.js","sourcesContent":["/* eslint-env mocha */\nconst { expect } = require('chai')\nconst { client, LONG_TIMEOUT, test_github_login } = require('../test-config')\n\ndescribe('Gists', function () {\n  this.timeout(LONG_TIMEOUT)\n\n  before(function () {\n    let newGist = {\n      description: 'A gist from Octokit',\n      public: true,\n      files: {\n        'zen.text': {\n          content: 'Keep it logically awesome.'\n        }\n      }\n    }\n\n    return client.gists.create(newGist)\n    .then(gist => {\n      this.gist = gist\n      return this.gist.comments.create({body: ':metal:'})\n      .then(gistComment => {\n        this.gist_comment = gistComment\n      })\n    }\n    )\n  })\n\n  it('creates a new gist', function () {\n    expect(this.gist.owner.login).to.equal(test_github_login)\n    return expect(this.gist.files['zen.text']).to.be.ok\n  })\n\n  it('creates a new gist comment', function () {\n    return expect(this.gist_comment.user.login).to.equal(test_github_login)\n  })\n\n  it('edit an existing gist', function () {\n    return this.gist.update({description: 'GitHub Zen'})\n  })\n\n  it('stars an existing gist', function () {\n    return this.gist.star.add()\n    .then(flag => expect(flag).to.be.true)\n  })\n\n  it('unstars an existing gist', function () {\n    return this.gist.star.remove()\n    .then(flag => expect(flag).to.be.true)\n  })\n\n  it('is not starred', function () {\n    return this.gist.star.contains()\n    .then(flag => expect(flag).to.be.false)\n  })\n\n  it('forks an existing gist', () =>\n    client.gists('839d32ef87bc22ba5231').forks.create()\n    .then(gist => {\n      return gist.remove()\n    }\n    )\n  )\n\n  it('returns the list of gist comments', function () {\n    return this.gist.comments.fetch()\n    .then(comments => {\n      return expect(comments).to.be.an.Array\n    }\n    )\n  })\n\n  it('returns a gist comment', function () {\n    return this.gist.comments(this.gist_comment.id).fetch()\n    .then(null, e => console.error(e))\n  })\n\n  it('updates a gist comment', function () {\n    return this.gist.comments(this.gist_comment.id).update({body: ':heart:'})\n  })\n\n  it('deletes a gist comment', function () {\n    return this.gist.comments(this.gist_comment.id).remove()\n  })\n\n  it('deletes a gist', function () {\n    return this.gist.remove()\n  })\n\n  return describe('Unauthenticated Gists', function () {\n    it('returns public gists', () =>\n      client.gists.public.fetch()\n      .then(gists => expect(gists).to.be.an.Array)\n    )\n\n    // it \"with username passed\", ->\n    //   client.users('defunkt').gists.fetch()\n    //   # .then(null,(e) -> console.error e)\n    //   .then (gists) ->\n    //     expect(gists).to.be.an.Array\n\n    it('without a username passed', () =>\n      client.gists.fetch()\n      .then(null, e => console.error(e))\n      .then(gists => expect(gists).to.be.an.Array)\n    )\n\n    it('returns the gist by ID', () =>\n      client.gists(790381).fetch()\n      .then(gist => expect(gist.owner.login).to.equal('jmccartie'))\n    )\n\n    return it(\"returns the user's starred gists\", () =>\n      client.gists.starred.fetch()\n      .then(null, e => console.error(e))\n      .then(gists => expect(gists).to.be.an.Array)\n    )\n  })\n})\n"]}