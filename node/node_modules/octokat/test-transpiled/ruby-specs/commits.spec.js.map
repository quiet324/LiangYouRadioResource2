{"version":3,"sources":["../../test/ruby-specs/commits.spec.js"],"names":["require","expect","client","LONG_TIMEOUT","test_repo","describe","timeout","it","repos","commits","fetch","then","items","author","to","be","ok","sha","since","an","Array","commit","login","equal","git","name","lastCommit","length","create","message","tree","parents","afterRemove","repo","refs","ref","v","head","base","commitMessage","merges","heads","remove","compare","comparison","baseCommit","mergeBaseCommit"],"mappings":"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","file":"commits.spec.js","sourceRoot":"./index.js","sourcesContent":["/* eslint-env mocha */\nconst { expect } = require('chai')\nconst { client, LONG_TIMEOUT, test_repo } = require('../test-config')\n\ndescribe('Commits', function () {\n  this.timeout(LONG_TIMEOUT)\n\n  it('returns all commits', () =>\n    client.repos('sferik/rails_admin').commits.fetch()\n    .then(({items}) => expect(items[0].author).to.be.ok)\n  )\n\n  // it \"handles branch or sha argument\", ->\n  it('handles the sha option', () => client.repos('sferik/rails_admin').commits.fetch({sha: 'master'}))\n\n  it('returns all commits on the specified date', () =>\n    client.repos('sferik/rails_admin').commits.fetch({since: '2011-01-20'})\n    .then(({items}) => expect(items).to.be.an.Array)\n  )\n\n  it('returns a commit', () =>\n    client.repos('sferik/rails_admin').commits('3cdfabd973bc3caac209cba903cfdb3bf6636bcd').fetch()\n    .then(commit => expect(commit.author.login).to.equal('caboteria'))\n  )\n\n  it('returns a detailed git commit', () =>\n    client.repos('octokit/octokit.rb').git.commits('2bfca14ed8ebc3dad75082ff175e6703aed7ccc0').fetch()\n    .then(commit => expect(commit.author.name).to.equal('Joey Wendt'))\n  )\n\n  it('creates a commit', () =>\n    client.repos(test_repo).commits.fetch()\n    .then(function ({items}) {\n      let lastCommit = items[items.length - 1]\n\n      return client.repos(test_repo).git.commits.create({message: 'My commit message', tree: lastCommit.commit.tree.sha, parents: [lastCommit.sha]})\n    })\n  )\n\n  it('merges a branch into another', function () {\n    let afterRemove = function () {\n      let repo = client.repos(test_repo)\n      return repo.commits.fetch()\n      .then(function ({items}) {\n        let lastCommit = items[items.length - 1]\n        return repo.git.refs.create({ref: 'refs/heads/branch-to-merge', sha: lastCommit.sha})\n        .then(function (v) {\n          let head = 'master'\n          let base = 'branch-to-merge'\n          let commitMessage = 'Testing the merge API'\n          return client.repos(test_repo).merges.create({base, head, commitMessage})\n        })\n      })\n    }\n\n    return client.repos(test_repo).git.refs.heads('branch-to-merge').remove()\n    .then(afterRemove, afterRemove)\n  })\n\n  return it('returns a comparison', () =>\n    client.repos('gvaughn/octokit').compare('0e0d7ae299514da692eb1cab741562c253d44188', 'b7b37f75a80b8e84061cd45b246232ad958158f5').fetch()\n    .then(function (comparison) {\n      expect(comparison.baseCommit.sha).to.equal('0e0d7ae299514da692eb1cab741562c253d44188')\n      return expect(comparison.mergeBaseCommit.sha).to.equal('b7b37f75a80b8e84061cd45b246232ad958158f5')\n    })\n  )\n})\n"]}