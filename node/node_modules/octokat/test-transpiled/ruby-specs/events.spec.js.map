{"version":3,"sources":["../../test/ruby-specs/events.spec.js"],"names":["require","expect","client","LONG_TIMEOUT","describe","timeout","it","events","fetch","then","to","be","an","Array","users","public","receivedEvents","repos","orgs","issues"],"mappings":";;AAAA;eACmBA,QAAQ,MAAR,C;IAAXC,M,YAAAA,M;;gBACyBD,QAAQ,gBAAR,C;IAAzBE,M,aAAAA,M;IAAQC,Y,aAAAA,Y;;AAEhBC,SAAS,QAAT,EAAmB,YAAY;AAC7B,OAAKC,OAAL,CAAaF,YAAb;;AAEAG,KAAG,2BAAH,EAAgC;AAAA,WAC9BJ,OAAOK,MAAP,CAAcC,KAAd,GACCC,IADD,CACM;AAAA,aAAUR,OAAOM,MAAP,EAAeG,EAAf,CAAkBC,EAAlB,CAAqBC,EAArB,CAAwBC,KAAlC;AAAA,KADN,CAD8B;AAAA,GAAhC;;AAKAP,KAAG,yBAAH,EAA8B;AAAA,WAC5BJ,OAAOY,KAAP,CAAa,QAAb,EAAuBP,MAAvB,CAA8BC,KAA9B,GACCC,IADD,CACM;AAAA,aAAUR,OAAOM,MAAP,EAAeG,EAAf,CAAkBC,EAAlB,CAAqBC,EAArB,CAAwBC,KAAlC;AAAA,KADN,CAD4B;AAAA,GAA9B;;AAKAP,KAAG,2CAAH,EAAgD;AAAA,WAC9CJ,OAAOY,KAAP,CAAa,QAAb,EAAuBP,MAAvB,CAA8BQ,MAA9B,CAAqCP,KAArC,GACCC,IADD,CACM;AAAA,aAAUR,OAAOM,MAAP,EAAeG,EAAf,CAAkBC,EAAlB,CAAqBC,EAArB,CAAwBC,KAAlC;AAAA,KADN,CAD8C;AAAA,GAAhD;;AAKAP,KAAG,kCAAH,EAAuC;AAAA,WACrCJ,OAAOY,KAAP,CAAa,aAAb,EAA4BE,cAA5B,CAA2CR,KAA3C,GACCC,IADD,CACM;AAAA,aAAUR,OAAOM,MAAP,EAAeG,EAAf,CAAkBC,EAAlB,CAAqBC,EAArB,CAAwBC,KAAlC;AAAA,KADN,CADqC;AAAA,GAAvC;;AAKAP,KAAG,qCAAH,EAA0C;AAAA,WACxCJ,OAAOY,KAAP,CAAa,aAAb,EAA4BE,cAA5B,CAA2CD,MAA3C,CAAkDP,KAAlD,GACCC,IADD,CACM;AAAA,aAAUR,OAAOM,MAAP,EAAeG,EAAf,CAAkBC,EAAlB,CAAqBC,EAArB,CAAwBC,KAAlC;AAAA,KADN,CADwC;AAAA,GAA1C;;AAKAP,KAAG,iCAAH,EAAsC;AAAA,WACpCJ,OAAOe,KAAP,CAAa,oBAAb,EAAmCV,MAAnC,CAA0CC,KAA1C,GACCC,IADD,CACM;AAAA,aAAUR,OAAOM,MAAP,EAAeG,EAAf,CAAkBC,EAAlB,CAAqBC,EAArB,CAAwBC,KAAlC;AAAA,KADN,CADoC;AAAA,GAAtC;;AAKA;;AAEAP,KAAG,yCAAH,EAA8C;AAAA,WAC5CJ,OAAOgB,IAAP,CAAY,QAAZ,EAAsBX,MAAtB,CAA6BC,KAA7B,GACCC,IADD,CACM;AAAA,aAAUR,OAAOM,MAAP,EAAeG,EAAf,CAAkBC,EAAlB,CAAqBC,EAArB,CAAwBC,KAAlC;AAAA,KADN,CAD4C;AAAA,GAA9C;;AAKAP,KAAG,qCAAH,EAA0C;AAAA,WACxCJ,OAAOe,KAAP,CAAa,oBAAb,EAAmCE,MAAnC,CAA0CZ,MAA1C,CAAiDC,KAAjD,GACCC,IADD,CACM;AAAA,aAAUR,OAAOM,MAAP,EAAeG,EAAf,CAAkBC,EAAlB,CAAqBC,EAArB,CAAwBC,KAAlC;AAAA,KADN,CADwC;AAAA,GAA1C;;AAKAP,KAAG,qCAAH,EAA0C;AAAA,WACxCJ,OAAOe,KAAP,CAAa,oBAAb,EAAmCE,MAAnC,CAA0C,CAA1C,EAA6CZ,MAA7C,CAAoDC,KAApD,GACCC,IADD,CACM;AAAA,aAAUR,OAAOM,MAAP,EAAeG,EAAf,CAAkBC,EAAlB,CAAqBC,EAArB,CAAwBC,KAAlC;AAAA,KADN,CADwC;AAAA,GAA1C;;AAKA,SAAOP,GAAG,qCAAH,EAA0C;AAAA,WAC/CJ,OAAOe,KAAP,CAAa,oBAAb,EAAmCE,MAAnC,CAA0CZ,MAA1C,CAAiD,QAAjD,EAA2DC,KAA3D,GACCC,IADD,CACM;AAAA,aAAUR,OAAOM,MAAP,EAAeG,EAAf,CAAkBC,EAAlB,CAAqBC,EAArB,CAAwBC,KAAlC;AAAA,KADN,CAD+C;AAAA,GAA1C,CAAP;AAID,CAtDD","file":"events.spec.js","sourceRoot":"./index.js","sourcesContent":["/* eslint-env mocha */\nconst { expect } = require('chai')\nconst { client, LONG_TIMEOUT } = require('../test-config')\n\ndescribe('Events', function () {\n  this.timeout(LONG_TIMEOUT)\n\n  it('returns all public events', () =>\n    client.events.fetch()\n    .then(events => expect(events).to.be.an.Array)\n  )\n\n  it('returns all user events', () =>\n    client.users('sferik').events.fetch()\n    .then(events => expect(events).to.be.an.Array)\n  )\n\n  it('returns public events performed by a user', () =>\n    client.users('sferik').events.public.fetch()\n    .then(events => expect(events).to.be.an.Array)\n  )\n\n  it('returns all user received events', () =>\n    client.users('api-padawan').receivedEvents.fetch()\n    .then(events => expect(events).to.be.an.Array)\n  )\n\n  it('returns public user received events', () =>\n    client.users('api-padawan').receivedEvents.public.fetch()\n    .then(events => expect(events).to.be.an.Array)\n  )\n\n  it('returns events for a repository', () =>\n    client.repos('sferik/rails_admin').events.fetch()\n    .then(events => expect(events).to.be.an.Array)\n  )\n\n  // TODO: returns all events for an organization\n\n  it(\"returns an organization's public events\", () =>\n    client.orgs('github').events.fetch()\n    .then(events => expect(events).to.be.an.Array)\n  )\n\n  it('lists issue events for a repository', () =>\n    client.repos('octokit/octokit.rb').issues.events.fetch()\n    .then(events => expect(events).to.be.an.Array)\n  )\n\n  it('lists issue events for a repository', () =>\n    client.repos('octokit/octokit.rb').issues(4).events.fetch()\n    .then(events => expect(events).to.be.an.Array)\n  )\n\n  return it('lists issue events for a repository', () =>\n    client.repos('octokit/octokit.rb').issues.events(37786228).fetch()\n    .then(events => expect(events).to.be.an.Array)\n  )\n})\n"]}