'use strict';

/* eslint-env mocha */
var _require = require('chai'),
    expect = _require.expect;

var _require2 = require('../test-config'),
    client = _require2.client,
    LONG_TIMEOUT = _require2.LONG_TIMEOUT;

describe('Events', function () {
  this.timeout(LONG_TIMEOUT);

  it('returns all public events', function () {
    return client.events.fetch().then(function (events) {
      return expect(events).to.be.an.Array;
    });
  });

  it('returns all user events', function () {
    return client.users('sferik').events.fetch().then(function (events) {
      return expect(events).to.be.an.Array;
    });
  });

  it('returns public events performed by a user', function () {
    return client.users('sferik').events.public.fetch().then(function (events) {
      return expect(events).to.be.an.Array;
    });
  });

  it('returns all user received events', function () {
    return client.users('api-padawan').receivedEvents.fetch().then(function (events) {
      return expect(events).to.be.an.Array;
    });
  });

  it('returns public user received events', function () {
    return client.users('api-padawan').receivedEvents.public.fetch().then(function (events) {
      return expect(events).to.be.an.Array;
    });
  });

  it('returns events for a repository', function () {
    return client.repos('sferik/rails_admin').events.fetch().then(function (events) {
      return expect(events).to.be.an.Array;
    });
  });

  // TODO: returns all events for an organization

  it("returns an organization's public events", function () {
    return client.orgs('github').events.fetch().then(function (events) {
      return expect(events).to.be.an.Array;
    });
  });

  it('lists issue events for a repository', function () {
    return client.repos('octokit/octokit.rb').issues.events.fetch().then(function (events) {
      return expect(events).to.be.an.Array;
    });
  });

  it('lists issue events for a repository', function () {
    return client.repos('octokit/octokit.rb').issues(4).events.fetch().then(function (events) {
      return expect(events).to.be.an.Array;
    });
  });

  return it('lists issue events for a repository', function () {
    return client.repos('octokit/octokit.rb').issues.events(37786228).fetch().then(function (events) {
      return expect(events).to.be.an.Array;
    });
  });
});
//# sourceMappingURL=events.spec.js.map