'use strict';

/* eslint-env mocha */
var _require = require('chai'),
    expect = _require.expect;

var _require2 = require('../test-config'),
    client = _require2.client,
    LONG_TIMEOUT = _require2.LONG_TIMEOUT,
    test_github_login = _require2.test_github_login;

describe('Gists', function () {
  this.timeout(LONG_TIMEOUT);

  before(function () {
    var _this = this;

    var newGist = {
      description: 'A gist from Octokit',
      public: true,
      files: {
        'zen.text': {
          content: 'Keep it logically awesome.'
        }
      }
    };

    return client.gists.create(newGist).then(function (gist) {
      _this.gist = gist;
      return _this.gist.comments.create({ body: ':metal:' }).then(function (gistComment) {
        _this.gist_comment = gistComment;
      });
    });
  });

  it('creates a new gist', function () {
    expect(this.gist.owner.login).to.equal(test_github_login);
    return expect(this.gist.files['zen.text']).to.be.ok;
  });

  it('creates a new gist comment', function () {
    return expect(this.gist_comment.user.login).to.equal(test_github_login);
  });

  it('edit an existing gist', function () {
    return this.gist.update({ description: 'GitHub Zen' });
  });

  it('stars an existing gist', function () {
    return this.gist.star.add().then(function (flag) {
      return expect(flag).to.be.true;
    });
  });

  it('unstars an existing gist', function () {
    return this.gist.star.remove().then(function (flag) {
      return expect(flag).to.be.true;
    });
  });

  it('is not starred', function () {
    return this.gist.star.contains().then(function (flag) {
      return expect(flag).to.be.false;
    });
  });

  it('forks an existing gist', function () {
    return client.gists('839d32ef87bc22ba5231').forks.create().then(function (gist) {
      return gist.remove();
    });
  });

  it('returns the list of gist comments', function () {
    return this.gist.comments.fetch().then(function (comments) {
      return expect(comments).to.be.an.Array;
    });
  });

  it('returns a gist comment', function () {
    return this.gist.comments(this.gist_comment.id).fetch().then(null, function (e) {
      return console.error(e);
    });
  });

  it('updates a gist comment', function () {
    return this.gist.comments(this.gist_comment.id).update({ body: ':heart:' });
  });

  it('deletes a gist comment', function () {
    return this.gist.comments(this.gist_comment.id).remove();
  });

  it('deletes a gist', function () {
    return this.gist.remove();
  });

  return describe('Unauthenticated Gists', function () {
    it('returns public gists', function () {
      return client.gists.public.fetch().then(function (gists) {
        return expect(gists).to.be.an.Array;
      });
    });

    // it "with username passed", ->
    //   client.users('defunkt').gists.fetch()
    //   # .then(null,(e) -> console.error e)
    //   .then (gists) ->
    //     expect(gists).to.be.an.Array

    it('without a username passed', function () {
      return client.gists.fetch().then(null, function (e) {
        return console.error(e);
      }).then(function (gists) {
        return expect(gists).to.be.an.Array;
      });
    });

    it('returns the gist by ID', function () {
      return client.gists(790381).fetch().then(function (gist) {
        return expect(gist.owner.login).to.equal('jmccartie');
      });
    });

    return it("returns the user's starred gists", function () {
      return client.gists.starred.fetch().then(null, function (e) {
        return console.error(e);
      }).then(function (gists) {
        return expect(gists).to.be.an.Array;
      });
    });
  });
});
//# sourceMappingURL=gists.spec.js.map