{"version":3,"sources":["../test/hypermedia.spec.js"],"names":["require","assert","expect","client","REPO_USER","REPO_NAME","describe","it","template","expected","params","repoName","user","name","label","fromUrl","url","to","equal","repoUser","fetch","then","repo","query","per_page","fn","throw","Error","json","created_at","expectedMs","Date","parse","val","actualMs","createdAt","getTime","repos","info","be","an","instanceof"],"mappings":"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","file":"hypermedia.spec.js","sourceRoot":"./index.js","sourcesContent":["/* eslint-env mocha */\nconst { assert, expect } = require('chai')\nconst { client, REPO_USER, REPO_NAME } = require('./test-config')\n\ndescribe('URL Hypermedia Patterns', function () {\n  it('supports hypermedia URLs with optional URL and querystring params', function () {\n    let template = '/repos/{repoName}{/user}{/foo}/releases/1/assets{?name,title,label}'\n    let expected = '/repos/AAA/BBB/releases/1/assets?name=CCC&label=DDD'\n    let params = {\n      repoName: 'AAA',\n      user: 'BBB',\n      name: 'CCC',\n      label: 'DDD'\n    }\n    let {url} = client.fromUrl(template, params)\n    return expect(url).to.equal(expected)\n  })\n\n  it('supports hypermedia URLs with missing querystring params', function () {\n    let template = '/repos{?label,title}'\n    let expected = '/repos'\n    let params = {}\n    let {url} = client.fromUrl(template, params)\n    return expect(url).to.equal(expected)\n  })\n\n  it('supports fetching from a hypermedia-constructed URL', function () {\n    let template = '/repos/{repoUser}{/repoName}'\n    let params = {\n      repoUser: REPO_USER,\n      repoName: REPO_NAME\n    }\n    return client.fromUrl(template, params).fetch()\n    .then(repo => expect(repo.name).to.equal(REPO_NAME))\n  })\n\n  it('supports & in templates', function () {\n    let template = 'https://api.github.com/search/code?q={query}{&page,per_page,sort,order}'\n    let expected = 'https://api.github.com/search/code?q=octokat&per_page=100'\n    let params = {\n      query: 'octokat',\n      per_page: 100\n    }\n    let {url} = client.fromUrl(template, params)\n    return expect(url).to.equal(expected)\n  })\n\n  return it('throws error if a required field is missing', function () {\n    let template = 'https://api.github.com/search/code?q={query}{&page,per_page,sort,order}'\n    let params =\n      // query: 'octokat'\n      {per_page: 100}\n\n    let fn = () => client.fromUrl(template, params)\n    return assert.throw(fn, Error, 'Octokat Error: Required parameter is missing: query')\n  })\n})\n\ndescribe('Hypermedia type conversion', function () {\n  it('converts date strings to dates (parse)', function () {\n    let json =\n      {created_at: '2016-01-01'}\n    let expectedMs = Date.parse(json.created_at)\n    return client.parse(json).then(function (val) {\n      let actualMs = val.createdAt.getTime()\n      return expect(actualMs).to.equal(expectedMs)\n    })\n  })\n\n  return it('converts date strings to dates (fetch)', () =>\n    client.repos(REPO_USER, REPO_NAME).fetch().then(info => expect(info.createdAt).to.be.an.instanceof(Date))\n  )\n})\n\n// describe 'URL Hypermedia Patterns (only tested in Node)', ->\n//\n//   URL_PATTERN = 'https://foo{?name,label}'\n//   CONTENT_TYPE = 'application/javascript'\n//   CONTENT = 'js_contents()'\n//\n//   it 'supports a single optional arg', (done) ->\n//     EXPECTED_URL = 'https://foo?name=build.js'\n//     requestFn = (method, url, content, {contentType, raw}) ->\n//       expect(url).to.equal(EXPECTED_URL)\n//       expect(content).to.equal(CONTENT)\n//       expect(contentType).to.equal(CONTENT_TYPE)\n//       expect(raw).to.be.true\n//       done()\n//     data = {upload_url: URL_PATTERN}\n//     {data} = HYPERMEDIA.responseMiddleware({requestFn, data})\n//     data.upload('build.js', CONTENT_TYPE, CONTENT)\n//\n//   it 'supports a single optional arg which is not a string', (done) ->\n//     EXPECTED_URL = 'https://foo?name=1234'\n//     requestFn = (method, url, content, {contentType, raw}) ->\n//       expect(url).to.equal(EXPECTED_URL)\n//       expect(content).to.equal(CONTENT)\n//       expect(contentType).to.equal(CONTENT_TYPE)\n//       expect(raw).to.be.true\n//       done()\n//     data = {upload_url: URL_PATTERN}\n//     {data} = HYPERMEDIA.responseMiddleware({requestFn, data})\n//     data.upload(1234, CONTENT_TYPE, CONTENT)\n//\n//   it 'supports multiple optional args', (done) ->\n//     EXPECTED_URL = 'https://foo?name=build.js&label=MY%20LABEL'\n//     requestFn = (method, url, content, {contentType, raw}) ->\n//       expect(url).to.equal(EXPECTED_URL)\n//       expect(content).to.equal(CONTENT)\n//       expect(contentType).to.equal(CONTENT_TYPE)\n//       expect(raw).to.be.true\n//       done()\n//     data = {upload_url: URL_PATTERN}\n//     {data} = HYPERMEDIA.responseMiddleware({requestFn, data})\n//     data.upload({name: 'build.js', label: 'MY LABEL'}, CONTENT_TYPE, CONTENT)\n"]}