'use strict';

/* eslint-env mocha */
var _require = require('chai'),
    expect = _require.expect;

var _require2 = require('./test-config'),
    client = _require2.client,
    REPO_USER = _require2.REPO_USER,
    REPO_NAME = _require2.REPO_NAME;

describe('Returned Objects', function () {
  it('has the same methods on octo.repos(REPO_ID).fetch().then(repo) as octo.me.repos.fetch().then(repos[0])', function () {
    return client.me.repos.fetch().then(function (_ref) {
      var items = _ref.items;

      expect(items).to.not.be.empty;
      return items[0].forks.fetch();
    });
  });

  it('has the same methods on octo.gists(ID).fetch().then(gist) as octo.gists.public.fetch().then(gists[0])', function () {
    return client.gists.public.fetch().then(function (_ref2) {
      var items = _ref2.items;

      expect(items).to.not.be.empty;
      return expect(items[0].star.contains).to.be.a.function;
    });
  });

  it('has the same methods on octo.users(ID).fetch().then(user) as octo.users.fetch().then(users[0])', function () {
    return client.users.fetch().then(function (_ref3) {
      var items = _ref3.items;

      expect(items).to.not.be.empty;
      return expect(items[0].gists.fetch).to.be.a.function;
    });
  });

  return it('has does not add the root context to returned objects', function () {
    return client.repos(REPO_USER, REPO_NAME).issues(1).fetch().then(function (issue) {
      expect(issue.user.avatar.url).to.not.be.null;
      return expect(issue.user.avatar.url).to.be.a.string;
    });
  });
});
//# sourceMappingURL=object.spec.js.map