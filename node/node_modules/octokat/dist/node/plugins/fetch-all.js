'use strict';

var toQueryString = require('../helpers/querystring');

var pushAll = function pushAll(target, source) {
  if (!Array.isArray(source)) {
    throw new Error('Octokat Error: Calling fetchAll on a request that does not yield an array');
  }
  return target.push.apply(target, source);
};

var getMore = function getMore(fetchable, requester, acc, cb) {
  var doStuff = function doStuff(err, results) {
    if (err) {
      return cb(err);
    }
    pushAll(acc, results.items);
    return getMore(results, requester, acc, cb);
  };

  if (!fetchNextPage(fetchable, requester, doStuff)) {
    return cb(null, acc);
  }
};

// TODO: HACK to handle camelCase and hypermedia plugins
var fetchNextPage = function fetchNextPage(obj, requester, cb) {
  if (typeof obj.next_page_url === 'string') {
    requester.request('GET', obj.next_page, null, null, cb);
    return true;
  } else if (obj.next_page) {
    obj.next_page.fetch(cb);
    return true;
  } else if (typeof obj.nextPageUrl === 'string') {
    requester.request('GET', obj.nextPageUrl, null, null, cb);
    return true;
  } else if (obj.nextPage) {
    obj.nextPage.fetch(cb);
    return true;
  } else {
    return false;
  }
};

// new class FetchAll
module.exports = {
  asyncVerbs: {
    fetchAll: function fetchAll(requester, path) {
      return function (cb, query) {
        return (
          // TODO: Pass in the instance so we can just call fromUrl maybe? and we don't rely on hypermedia to create nextPage
          requester.request('GET', '' + path + toQueryString(query), null, null, function (err, results) {
            if (err) {
              return cb(err);
            }
            var acc = [];
            pushAll(acc, results.items);
            // TODO: handle `items.next_page = string/function`, `items.nextPage = string/function`
            return getMore(results, requester, acc, cb);
          })
        );
      };
    }
  }
};
//# sourceMappingURL=fetch-all.js.map