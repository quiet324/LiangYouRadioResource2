{"version":3,"sources":["../../../src/plugins/read-binary.js"],"names":["toQueryString","require","module","exports","verbs","readBinary","path","query","method","options","isRaw","isBase64","input","cb","headers","mimeType","data","converted","iterable","__range__","length","j","i","String","fromCharCode","charCodeAt","left","right","inclusive","range","ascending","end","push"],"mappings":";;;;;;AAAA,IAAMA,gBAAgBC,QAAQ,wBAAR,CAAtB;;AAEAC,OAAOC,OAAP,GAAiB;AACf,wBAAe;AAAA;;AACb,SAAKC,KAAL,GACE;AAACC,gBAAD,sBAAaC,IAAb,EAAmBC,KAAnB,EAA0B;AAAE,eAAO,EAACC,QAAQ,KAAT,EAAgBF,WAASA,IAAT,GAAgBN,cAAcO,KAAd,CAAhC,EAAwDE,SAAS,EAACC,OAAO,IAAR,EAAcC,UAAU,IAAxB,EAAjE,EAAP;AAAwG;AAApI,KADF;AAED;;AAJc;AAAA;AAAA,2CAMSC,KANT,EAMgBC,EANhB,EAMoB;AAAA,UAC5BJ,OAD4B,GACjBG,KADiB,CAC5BH,OAD4B;;AAEjC,UAAIA,OAAJ,EAAa;AAAA,YACNE,QADM,GACMF,OADN,CACNE,QADM;;AAEX,YAAIA,QAAJ,EAAc;AACZC,gBAAME,OAAN,CAAc,QAAd,IAA0B,4BAA1B;AACAF,gBAAMG,QAAN,GAAiB,oCAAjB;AACD;AACF;AACD,aAAOF,GAAG,IAAH,EAASD,KAAT,CAAP;AACD;AAhBc;AAAA;AAAA,4CAkBUA,KAlBV,EAkBiBC,EAlBjB,EAkBqB;AAAA,UAC7BJ,OAD6B,GACZG,KADY,CAC7BH,OAD6B;AAAA,UACpBO,IADoB,GACZJ,KADY,CACpBI,IADoB;;AAElC,UAAIP,OAAJ,EAAa;AAAA,YACNE,QADM,GACMF,OADN,CACNE,QADM;AAEX;;AACA,YAAIA,QAAJ,EAAc;AACZ;AACA;AACA,cAAIM,YAAY,EAAhB;AACA,cAAIC,WAAWC,UAAU,CAAV,EAAaH,KAAKI,MAAlB,EAA0B,KAA1B,CAAf;AACA,eAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIH,SAASE,MAA7B,EAAqCC,GAArC,EAA0C;AACxC,gBAAIC,IAAIJ,SAASG,CAAT,CAAR;AACAJ,yBAAaM,OAAOC,YAAP,CAAoBR,KAAKS,UAAL,CAAgBH,CAAhB,IAAqB,IAAzC,CAAb;AACD;;AAEDV,gBAAMI,IAAN,GAAaC,SAAb,CAVY,CAUW;AACxB;AACF;AACD,aAAOJ,GAAG,IAAH,EAASD,KAAT,CAAP;AACD;AArCc;;AAAA;AAAA,MAAjB;;AAwCA,SAASO,SAAT,CAAoBO,IAApB,EAA0BC,KAA1B,EAAiCC,SAAjC,EAA4C;AAC1C,MAAIC,QAAQ,EAAZ;AACA,MAAIC,YAAYJ,OAAOC,KAAvB;AACA,MAAII,MAAM,CAACH,SAAD,GAAaD,KAAb,GAAqBG,YAAYH,QAAQ,CAApB,GAAwBA,QAAQ,CAA/D;AACA,OAAK,IAAIL,IAAII,IAAb,EAAmBI,YAAYR,IAAIS,GAAhB,GAAsBT,IAAIS,GAA7C,EAAkDD,YAAYR,GAAZ,GAAkBA,GAApE,EAAyE;AACvEO,UAAMG,IAAN,CAAWV,CAAX;AACD;AACD,SAAOO,KAAP;AACD","file":"read-binary.js","sourcesContent":["const toQueryString = require('../helpers/querystring')\n\nmodule.exports = new class ReadBinary {\n  constructor () {\n    this.verbs =\n      {readBinary (path, query) { return {method: 'GET', path: `${path}${toQueryString(query)}`, options: {isRaw: true, isBase64: true}} }}\n  }\n\n  requestMiddlewareAsync (input, cb) {\n    let {options} = input\n    if (options) {\n      let {isBase64} = options\n      if (isBase64) {\n        input.headers['Accept'] = 'application/vnd.github.raw'\n        input.mimeType = 'text/plain; charset=x-user-defined'\n      }\n    }\n    return cb(null, input)\n  }\n\n  responseMiddlewareAsync (input, cb) {\n    let {options, data} = input\n    if (options) {\n      let {isBase64} = options\n      // Convert the response to a Base64 encoded string\n      if (isBase64) {\n        // Convert raw data to binary chopping off the higher-order bytes in each char.\n        // Useful for Base64 encoding.\n        let converted = ''\n        let iterable = __range__(0, data.length, false)\n        for (let j = 0; j < iterable.length; j++) {\n          let i = iterable[j]\n          converted += String.fromCharCode(data.charCodeAt(i) & 0xff)\n        }\n\n        input.data = converted // or throw new Error('BUG! Expected JSON data to exist')\n      }\n    }\n    return cb(null, input)\n  }\n}()\n\nfunction __range__ (left, right, inclusive) {\n  let range = []\n  let ascending = left < right\n  let end = !inclusive ? right : ascending ? right + 1 : right - 1\n  for (let i = left; ascending ? i < end : i > end; ascending ? i++ : i--) {\n    range.push(i)\n  }\n  return range\n}\n"]}