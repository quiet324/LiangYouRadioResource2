{"version":3,"sources":["../../../src/plugins/pagination.js"],"names":["module","exports","input","cb","jqXHR","data","Array","isArray","items","slice","linksHeader","getResponseHeader","split","forEach","part","match","unusedField","href","rel"],"mappings":";;;;;;;;AAAAA,OAAOC,OAAP,GAAiB;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,4CACUC,KADV,EACiBC,EADjB,EACqB;AAAA,UAC7BC,KAD6B,GACdF,KADc,CAC7BE,KAD6B;AAAA,UACtBC,IADsB,GACdH,KADc,CACtBG,IADsB;;AAElC,UAAI,CAACD,KAAL,EAAY;AAAE,eAAOD,GAAG,IAAH,EAASD,KAAT,CAAP;AAAwB,OAFJ,CAEK;;AAEvC;AACA;;AAEA,UAAII,MAAMC,OAAN,CAAcF,IAAd,CAAJ,EAAyB;AACvBA,eAAO,EAACG,OAAOH,KAAKI,KAAL,EAAR,EAAP,CADuB,CACM;;AAE7B;AACA;AACA,YAAIC,cAAcN,MAAMO,iBAAN,CAAwB,MAAxB,CAAlB;AACA,YAAID,WAAJ,EAAiB;AACfA,sBAAYE,KAAZ,CAAkB,GAAlB,EAAuBC,OAAvB,CAA+B,UAACC,IAAD,EAAU;AAAA,8BACRA,KAAKC,KAAL,CAAW,0BAAX,CADQ;AAAA;AAAA,gBAClCC,WADkC;AAAA,gBACrBC,IADqB;AAAA,gBACfC,GADe;AAEvC;AACA;;;AACAb,iBAAQa,GAAR,kBAA0BD,IAA1B;AACD,WALD;AAMD;AACDf,cAAMG,IAAN,GAAaA,IAAb,CAduB,CAcL;AACnB;AACD,aAAOF,GAAG,IAAH,EAASD,KAAT,CAAP;AACD;AAzBc;;AAAA;AAAA,MAAjB","file":"pagination.js","sourcesContent":["module.exports = new class Pagination {\n  responseMiddlewareAsync (input, cb) {\n    let {jqXHR, data} = input\n    if (!jqXHR) { return cb(null, input) } // The plugins are all used in `octo.parse()` which does not have a jqXHR\n\n    // Only JSON responses have next/prev/first/last link headers\n    // Add them to data so the resolved value is iterable\n\n    if (Array.isArray(data)) {\n      data = {items: data.slice()} // Convert to object so we can add the next/prev/first/last link headers\n\n      // Parse the Link headers\n      // of the form `<http://a.com>; rel=\"next\", <https://b.com?a=b&c=d>; rel=\"previous\"`\n      let linksHeader = jqXHR.getResponseHeader('Link')\n      if (linksHeader) {\n        linksHeader.split(',').forEach((part) => {\n          let [unusedField, href, rel] = part.match(/<([^>]+)>; rel=\"([^\"]+)\"/)\n          // Add the pagination functions on the JSON since Promises resolve one value\n          // Name the functions `nextPage`, `previousPage`, `firstPage`, `lastPage`\n          data[`${rel}_page_url`] = href\n        })\n      }\n      input.data = data // or throw new Error('BUG! Expected JSON data to exist')\n    }\n    return cb(null, input)\n  }\n}()\n"]}